buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }

    repositories {
        maven {
            credentials {
                username "$artifactory_user"
                password "$artifactory_password"
            }
            url "$artifactory_contextUrl/libs-release"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.2"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply from: '_docker.gradle'
apply plugin: "com.gorylenko.gradle-git-properties"


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        credentials {
            username "$artifactory_user"
            password "$artifactory_password"
        }
        url "$artifactory_contextUrl/libs-release"
    }
}

jar {
    baseName = 'publisher'
    version = '1.0.0'
}

sourceSets {
    componentTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    componentTestCompile.extendsFrom testCompile
    componentTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom componentTestCompile
    functionalTestRuntime.extendsFrom componentTestCompile
}

dependencyManagement {
    dependencies {
        dependency 'com.revinate.px:px-commons-logging:1.5.1.53'
        dependency "com.revinate:ship-genproto-java:1.0.27"
        dependency "com.revinate:assertj-json:1.2.0"
        dependency 'com.google.guava:guava:23.6-jre'

    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-web:"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.kafka:spring-kafka"
    compile 'com.revinate.px:px-commons-logging'
    compile 'com.google.guava:guava'
    compile 'org.projectlombok:lombok'
    compile "com.revinate:ship-genproto-java"
    compile "org.apache.kafka:kafka-streams"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.assertj:assertj-core"
    componentTestCompile "org.springframework.kafka:spring-kafka-test"
    componentTestCompile 'com.revinate:assertj-json'
}

gitProperties {
    dateFormat = "yyyy-MM-dd HH:mm:ssZ"
    dateFormatTimeZone = 'GMT'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task componentTest(type: Test) {
    testClassesDirs = sourceSets.componentTest.output.classesDirs
    classpath = sourceSets.componentTest.runtimeClasspath

    jvmArgs  '-DXms2G', '-DXmx4G'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'short'
    }
}

task functionalTest(type: Test, dependsOn: [componentTest, startApplication]) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    jvmArgs  '-DXms2G', '-DXmx4G'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'short'
    }
    finalizedBy removeAllContainers
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}
