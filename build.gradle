buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }

    repositories {
        maven {
            credentials {
                username "$artifactory_user"
                password "$artifactory_password"
            }
            url "$artifactory_contextUrl/libs-release"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'
apply from: '_docker.gradle'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        credentials {
            username "$artifactory_user"
            password "$artifactory_password"
        }
        url "$artifactory_contextUrl/libs-release"
    }
}
ext {
    springKafkaVersion = '1.3.2.RELEASE'
    shipGenprotoJavaVersion = '1.0.27'
    kafkaClientVersion = '0.10.2.0'
    assertjVersion = '3.9.0'
}

jar {
    baseName = 'publisher'
    version = '1.0.0'
}

sourceSets {
    componentTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    componentTestCompile.extendsFrom testCompile
    componentTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom componentTestCompile
    functionalTestRuntime.extendsFrom componentTestCompile
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    compile'com.revinate.px:px-commons-logging:1.5.1.53'
    compile 'com.google.guava:guava:23.6-jre'
    compile 'org.projectlombok:lombok:1.16.8'
    compile("org.springframework.kafka:spring-kafka")
    compile("com.revinate:ship-genproto-java:${shipGenprotoJavaVersion}")
    compile("org.apache.kafka:kafka-streams:${kafkaClientVersion}")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.assertj:assertj-core:${assertjVersion}")
    componentTestCompile("org.springframework.kafka:spring-kafka-test:${springKafkaVersion}")
    componentTestCompile 'com.revinate:assertj-json:1.2.0'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

task componentTest(type: Test) {
    testClassesDirs = sourceSets.componentTest.output.classesDirs
    classpath = sourceSets.componentTest.runtimeClasspath

    jvmArgs  '-DXms2G', '-DXmx4G'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'short'
    }
}

task functionalTest(type: Test, dependsOn: [componentTest, startApplication]) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    jvmArgs  '-DXms2G', '-DXmx4G'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'short'
    }
    finalizedBy removeAllContainers
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}
